
===Warning

Don't use this just yet.. still need to firm it all up a little bit..


===Overview

Muto is a lightweight little ruby/vbs/bat script that I put together that will allow you switch to another version of Ruby whilst also allowing you to
alter your Windows Environment at the same time. You can do this with Muto without having to reload your command prompt/shell and all of your gem paths etc
are automatically updated as you change versions.


===Why I put this together..

Firstly, I'm not trying to take anything from Pik, check it out first if you haven't already, there's a thousand things you can do with it and it might
be better suited to what your needs are: https://github.com/vertiginous/pik

I put Muto together because I needed to also frequently change a few environment variables every time I changed my version of ruby and I just got sick
of having to do it all the time and then having to reload my command prompt as well just to pick up the changes. Also I needed to be able to switch
ruby versions and persist the change to another version of Ruby across my entire Windows environment.


===Example Usage

    muto
        >>Expected format:  muto [ruby_version]
        >>
        >>Available Versions are:
        >>  186   - ruby 1.8.6 (2007-09-24 patchlevel 111) [i386-mswin32]
        >>  192   - ruby 1.9.2p180 (2011-02-18) [i386-mingw32]
        >>
        >>Currently using:
        >>  ruby 1.8.6 (2007-09-24 patchlevel 111) [i386-mswin32]

    ruby -v
        >>ruby 1.8.6 (2007-09-24 patchlevel 111) [i386-mswin32]

    muto 192
        >>System updated. Now using:
        >>ruby 1.9.2p180 (2011-02-18) [i386-mingw32]

    ruby -v
        >>ruby 1.9.2p180 (2011-02-18) [i386-mingw32]


===Setup/Config

Clone Muto to a local directory on your Windows machine and then add the Muto diretory to your PATH environment variable. This'll give you access to the
<b>muto</b> command from your command line.

Then modify your local <b>ruby_versions.yml</b> and add the versions of Ruby that you have installed on your computer. You can also set other User Environment
variables at the same time. In the following example I've added the ability to use JRuby164 with either the Java Runtime 6 or Java Runtime 7

# ruby_versions.yml

ruby_versions:
  ruby_186:
    shortcut: 186
    bin_folder: C:\ruby\bin
  ruby_192:
    shortcut: 192
    bin_folder: C:\ruby192\bin

  jruby_164_jre6:
    shortcut: jr_j6
    bin_folder: C:\jruby-1.6.4\bin
    exe_name: jruby.exe
    user_env_variables:
      java_home: C:\Program Files\Java\jre6
  jruby_164_jre7:
    shortcut: jr_j7
    bin_folder: C:\jruby-1.6.4\bin
    exe_name: jruby.exe
    user_env_variables:
      java_home: C:\Program Files\Java\jre7



